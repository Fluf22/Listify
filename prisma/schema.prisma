datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  name          String
  password      String
  emailVerified Boolean @default(false)
  emailToken    String?

  wishes        Wish[]          @relation("AddedBy_Wish")
  receives      Wish[]          @relation("Recipient_Wish")
  gifts         Gifter[]        @relation("User_Gifter")
  sent          WishMessage[]   @relation("FromUser_WishMessage")
  eventMessages EventMessage[]  @relation("FromUser_EventMessage")
  attending     Participation[] @relation("User_Participation")
  managing      Event[]         @relation("Owner_Event")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Participation {
  id      String @id @default(cuid())
  userId  String
  eventId String
  status  String // "PENDING", "ACCEPTED", "DECLINED"

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user  User  @relation(name: "User_Participation", fields: [userId], references: [id])
  event Event @relation(name: "Event_UserParticipation", fields: [eventId], references: [id])

  @@unique([userId, eventId]) // only one participation per user per event
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime?
  ownerId     String

  participants Participation[] @relation("Event_UserParticipation")
  wishes       Wish[]          @relation(name: "Event_Wish")
  messages     EventMessage[]  @relation("OnEvent_EventMessage")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  owner User @relation(name: "Owner_Event", fields: [ownerId], references: [id])

  @@unique([ownerId, title]) // Each user can only have one event with the same title
}

model Wish {
  id          String  @id @default(cuid())
  recipientId String
  creatorId   String
  eventId     String
  title       String
  description String?
  image       String?
  link        String?
  price       Int?
  order       Int

  giftedBy Gifter[]      @relation("Wish_Gifter")
  messages WishMessage[] @relation("OnWish_WishMessage")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  recipient User  @relation(name: "Recipient_Wish", fields: [recipientId], references: [id])
  creator   User  @relation(name: "AddedBy_Wish", fields: [creatorId], references: [id])
  event     Event @relation(name: "Event_Wish", fields: [eventId], references: [id])

  @@index([eventId, creatorId, recipientId, createdAt(sort: Desc)]) // Most used query
}

model Gifter {
  id       String  @id @default(cuid())
  wishId   String
  gifterId String
  amount   Int
  bought   Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  wish   Wish @relation(name: "Wish_Gifter", fields: [wishId], references: [id])
  gifter User @relation(name: "User_Gifter", fields: [gifterId], references: [id])

  @@unique([wishId, gifterId])
}

model WishMessage {
  id      String @id @default(cuid())
  fromId  String
  onId    String
  content String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  from User @relation(name: "FromUser_WishMessage", fields: [fromId], references: [id])
  on   Wish @relation(name: "OnWish_WishMessage", fields: [onId], references: [id])
}

model EventMessage {
  id      String @id @default(cuid())
  fromId  String
  onId    String
  content String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  from User  @relation(name: "FromUser_EventMessage", fields: [fromId], references: [id])
  on   Event @relation(name: "OnEvent_EventMessage", fields: [onId], references: [id])
}
